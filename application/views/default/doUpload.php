<?phpGLOBAL $DB, $session;header('Content-type:application/json;charset=utf-8');$notices = load_class('notifications', 'models');$user_agent = load_class('user_agent', 'libraries');load_helpers('upload_helper');try {    if (        !isset($_FILES['file']['error']) ||        is_ARRAY($_FILES['file']['error'])    ) {        throw new RuntimeException('Invalid parameters.');    }    switch ($_FILES['file']['error']) {        case UPLOAD_ERR_OK:            break;        case UPLOAD_ERR_NO_FILE:            throw new RuntimeException('No file sent.');        case UPLOAD_ERR_INI_SIZE:        case UPLOAD_ERR_FORM_SIZE:            throw new RuntimeException('Exceeded filesize limit.');        default:            throw new RuntimeException('Unknown errors.');    }		if(!$notices->get_notification('disk_full')->can_continue) {		throw new RuntimeException('Sorry! You have reached your maximum disk space capacity. You must delete some of your files to be able to continue.');	}		if(!$notices->get_notification('daily_usage')->can_continue) {		throw new RuntimeException('Sorry! You have reached your maximum file uploads for today.');	}		// generate a random string 	$n_FileTitle = $_FILES['file']['name'];	$n_FileTitle_Real = preg_replace('/\\.[^.\\s]{3,4}$/', '', $n_FileTitle);	$n_FileName = random_string('alnum', mt_rand(10, 30));	$n_Thumb = random_string('alnum', mt_rand(45, 70));	$n_FileExt = strtolower(pathinfo($n_FileTitle, PATHINFO_EXTENSION));		// set the item type	$itemType = 'FILE';		// set the upload file path    $filepath = sprintf('assets/uploads/%s', $n_FileName);	   	if($n_FileExt == "pdf") {		$n_ThumbNail = "assets/images/icons/pdf2.png";	} ELSEIF(IN_ARRAY($n_FileExt,ARRAY("mpeg","mpg","mpe","qt","mov","avi","movie","mp4","flv","webm"))){		$n_ThumbNail = "assets/images/icons/movie.jpg";	} ELSEIF(IN_ARRAY($n_FileExt, ARRAY("docx", "doc"))) {		$n_ThumbNail = "assets/images/icons/word.jpg";	} ELSEIF(IN_ARRAY($n_FileExt, ARRAY("xlsx", "xls"))) {		$n_ThumbNail = "assets/images/icons/excel.png";	} ELSEIF(IN_ARRAY($n_FileExt, ARRAY("mp3", "wma"))) {		$n_ThumbNail = "assets/images/icons/audio.png";	} ELSEIF(IN_ARRAY($n_FileExt, ARRAY("zip","gzip","gz","tar","tgz","rar","7zip"))) {		$n_ThumbNail = "assets/images/icons/zip.png";	} ELSEIF(IN_ARRAY($n_FileExt, ARRAY("html", "html","xhtml"))) {		$n_ThumbNail = "assets/images/icons/html.png";	} ELSEIF(IN_ARRAY($n_FileExt, ARRAY("php","php4","php3"))) {		$n_ThumbNail = "assets/images/icons/php.svg";	} ELSEIF(IN_ARRAY($n_FileExt, ARRAY("csv"))) {		$n_ThumbNail = "assets/images/icons/csv.png";	}  ELSEIF(IN_ARRAY($n_FileExt, ARRAY("exe","msi","dll"))) {		$n_ThumbNail = "assets/images/icons/excutable.png";	} ELSEIF(IN_ARRAY($n_FileExt, ARRAY("jpg", "png", "gif", "jpeg","bmp","jpg2"))) {		create_thumbnail(config_item('upload_path').$n_FileName, config_item('thumbnail_path').$n_Thumb.".$n_FileExt");		$n_ThumbNail = config_item('thumbnail_path').$n_Thumb.".$n_FileExt";	} else {		$n_ThumbNail = "assets/images/icons/text.png";	}			// confirm the the replaceItemId session has been set	IF($session->userdata("replaceItemId")) {		// set a variable for the item_id		$item_id = $session->userdata("replaceItemId");		// get the file name for the item to be replaced		$FileName = $directory->item_by_id2('item_title', $item_id);		$FileSlug = $directory->item_by_id2('item_unique_id', $item_id);		$FileExt = $directory->item_by_id2('item_ext', $item_id);				// ensure the files have the same type and extension 		IF($FileExt == $n_FileExt) {			// upload the file			IF (!move_uploaded_file( $_FILES['file']['tmp_name'], $filepath )) {				throw new RuntimeException('Failed to move uploaded file.');			}						// get the file size			$n_FileSize = file_size_convert("assets/uploads/$n_FileName");			$n_FileSize_KB = file_size("assets/uploads/$n_FileName");			$n_OldName = "old_".random_string('alnum', mt_rand(45, 70));						// rename the old file with an appended unique name			@rename("assets/uploads/$FileSlug", "assets/uploads/$n_OldName");						// rename the new file to take the information of the new file			@rename($filepath, "assets/uploads/$FileSlug");						// update the database with the new information 			$DB->query("UPDATE _item_listing SET 				user_id='{$session->userdata(":lifeID")}',				item_size='$n_FileSize', item_size_kilobyte='$n_FileSize_KB',				WHERE id='$item_id'			");						// insert item history into the database			$DB->query("INSERT INTO _item_listing_history SET				item_title='$n_OldName', item_id='$item_id',				replaced_by='{$session->userdata(":lifeID")}'			");						// alert all users that the file has been replaced			$ip = $user_agent->ip_address();			$br = $user_agent->browser()." ".$user_agent->platform();						$DB->query("INSERT INTO _shared_comments SET file_id='$item_id', user_id='{$session->userdata(":lifeID")}', comment='The file has been replaced with a newer version. Please do well to check it out by clicking on the download link.', user_agent='$ip: $br', class='warning'");					// unset the session for the item to be replaced			$session->unset_userdata("replaceItemId");		} ELSE {			ECHO json_encode([				'status' => 'error',				'message' => 'Sorry! The files should be of the same type. (The files must have the same extension.)'			]);		}	} ELSE {				// upload the file		if (!move_uploaded_file( $_FILES['file']['tmp_name'], $filepath )) {			throw new RuntimeException('Failed to move uploaded file.');		}				// get the file size		$n_FileSize = file_size_convert("assets/uploads/$n_FileName");		$n_FileSize_KB = file_size("assets/uploads/$n_FileName");				// insert the new record into the database item listing table 		$DB->query("INSERT INTO _item_listing SET 			user_id='{$session->userdata(":lifeID")}',			item_users='{$session->userdata(":logedUsername")}', 			item_title='$n_FileTitle_Real', item_unique_id='$n_FileName',			item_type='$itemType', item_ext='$n_FileExt',			item_date=now(), item_thumbnail='$n_ThumbNail',			item_parent_id='{$session->userdata('RootFolder')}', 			item_folder_id='{$session->userdata('RootFolder')}',			item_size='$n_FileSize', item_size_kilobyte='$n_FileSize_KB'		");	}		    // All good, send the response    ECHO json_encode([        'status' => 'ok',        'path' => $filepath    ]);} catch (RuntimeException $e) {	// Something went wrong, send the err message as JSON	http_response_code(400);	ECHO json_encode([		'status' => 'error',		'message' => $e->getMessage()	]);}